import Head from "next/head";
import { useState, useEffect } from "react";
import { useDispatch } from "react-redux";
import styles from "../styles/Home.module.css";
import NavBar from "./components/NavBar";
import {
  Container,
  Box,
  styled,
  Grid,
  FormControl,
  InputLabel,
  Input,
  InputAdornment,
  TextField,
  Button,
  MenuItem,
  Typography,
} from "@mui/material";

import MyFooter from "./components/MyFooter";
import { setErrorState, setLoadingState } from "../app/rootSlice";
import message from "../common/messages";
import { Controller, useForm } from "react-hook-form";
import { Product } from "../interfaces/entity/product";
const StyledBox = styled(Box)(({ theme }) => ({
  backgroundColor: "white",
  borderRadius: 5,
  padding: 18,
}));

const StyledTitle = styled(Typography)(({ theme }) => ({
  variant: "h5",
  align: "center",
  color: "#008B88",
}));

type InputCardGame = {
  game: string;
};

function Home() {
  const dispatch = useDispatch();
  const [products, setProducts] = useState<Product[]>([]);
  const { control, handleSubmit, reset, register, watch } = useForm({
    // resolver: ajvResolver(schema),
  });
  const watchShowGame = watch("game", false); // you can supply default value as second argument
  const [inputCardGame, setInputCardGame] = useState<InputCardGame>();

  useEffect(() => {
    dispatch(
      setLoadingState({
        loading: true,
        loadingMessage: message.appAPILoading,
      })
    );
    fetch("/api/public/card-games")
      .then((response) => response.json())
      .then((data) => {
        if (data.error === true) {
          dispatch(
            setErrorState({
              message: data.message,
              values: "",
              severity: "error",
            })
          );
        } else {
          setProducts(data);
        }
      })
      .finally(() => {
        dispatch(
          setLoadingState({
            loading: false,
            loadingMessage: null,
          })
        );
      });
  }, [dispatch]);

  const onSubmit = (data: object) => {
    dispatch(
      setLoadingState({
        loading: true,
        loadingMessage: message.appAPILoading,
      })
    );
    fetch("/api/product-item", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        ...data,
      }),
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.error === true) {
          dispatch(
            setErrorState({
              message: data.message,
              values: "",
              severity: "error",
            })
          );
        }
      })
      .finally(() => {
        dispatch(
          setLoadingState({
            loading: false,
            loadingMessage: null,
          })
        );
      });
  };

  const renderPackage = (activeProductId: string) => {
    const product = products.find((i) => i.id === activeProductId);
    console.log("product", product);
    const productItems = product?.productItems || [
      {
        id: "id",
        name: "No data",
      },
    ];
    return productItems.map((option) => (
      <MenuItem key={option.id} value={option.id}>
        {option.name}
      </MenuItem>
    ));
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Mua bán account games</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <NavBar></NavBar>

      <Container style={{ marginTop: 10 }}>
        <StyledBox>
          <Grid container>
            <Grid item xs={12} sm={6} md={6} lg={6} xl={6}>
              <StyledTitle variant="h5" align="center" color="#008B88">
                Nhập thông tin NẠP GENSHIN IMPACT
              </StyledTitle>
              <form onSubmit={handleSubmit(onSubmit)} autoComplete="off">
                <Controller
                  name="game"
                  control={control}
                  render={({
                    field: { onChange, value },
                    fieldState: { error },
                  }) => (
                    <FormControl fullWidth sx={{ m: 1 }} variant="standard">
                      <TextField
                        id="outlined-multiline-flexible"
                        label="Game"
                        select={true}
                        onChange={onChange}
                        variant="filled"
                        size="small"
                        error={error ? true : false}
                        helperText={error?.message}
                      >
                        {products.map((option) => (
                          <MenuItem key={option.id} value={option.id}>
                            {option.name}
                          </MenuItem>
                        ))}
                      </TextField>
                    </FormControl>
                  )}
                />
                <Controller
                  name="package"
                  control={control}
                  render={({
                    field: { onChange, value },
                    fieldState: { error },
                  }) => (
                    <FormControl fullWidth sx={{ m: 1 }} variant="standard">
                      <TextField
                        id="outlined-multiline-flexible"
                        label="Gói"
                        select={watchShowGame ? true : false}
                        onChange={onChange}
                        variant="filled"
                        size="small"
                        error={error ? true : false}
                        helperText={error?.message}
                      >
                        {watchShowGame && renderPackage(watchShowGame)}
                      </TextField>
                    </FormControl>
                  )}
                />
                <Controller
                  name="accountId"
                  control={control}
                  render={({ field, fieldState: { error } }) => (
                    <FormControl fullWidth sx={{ m: 1 }} variant="standard">
                      <TextField
                        {...field}
                        id="outlined-multiline-flexible"
                        label="User ID"
                        variant="filled"
                        size="small"
                        error={error ? true : false}
                        helperText={error?.message}
                      />
                    </FormControl>
                  )}
                />

                <Controller
                  name="accountName"
                  control={control}
                  render={({ field, fieldState: { error } }) => (
                    <FormControl fullWidth sx={{ m: 1 }} variant="standard">
                      <TextField
                        {...field}
                        id="outlined-multiline-flexible"
                        label="Tên tài khoản"
                        variant="filled"
                        size="small"
                        error={error ? true : false}
                        helperText={error?.message}
                        inputProps={{ min: 1000 }}
                      />
                    </FormControl>
                  )}
                />

                <Controller
                  name="accountPassword"
                  control={control}
                  render={({ field, fieldState: { error } }) => (
                    <FormControl fullWidth sx={{ m: 1 }} variant="standard">
                      <TextField
                        {...field}
                        id="outlined-multiline-flexible"
                        label="Mật khẩu"
                        variant="filled"
                        size="small"
                        error={error ? true : false}
                        helperText={error?.message}
                      />
                    </FormControl>
                  )}
                />
                <Controller
                  name="server"
                  control={control}
                  render={({ field, fieldState: { error } }) => (
                    <FormControl fullWidth sx={{ m: 1 }} variant="standard">
                      <TextField
                        {...field}
                        id="outlined-multiline-flexible"
                        label="Server"
                        variant="filled"
                        size="small"
                        error={error ? true : false}
                        helperText={error?.message}
                      />
                    </FormControl>
                  )}
                />
                <Controller
                  name="characterName"
                  control={control}
                  render={({ field, fieldState: { error } }) => (
                    <FormControl fullWidth sx={{ m: 1 }} variant="standard">
                      <TextField
                        {...field}
                        id="outlined-multiline-flexible"
                        label="Tên nhân vật"
                        variant="filled"
                        size="small"
                        error={error ? true : false}
                        helperText={error?.message}
                      />
                    </FormControl>
                  )}
                />
                <Controller
                  name="phoneNumber"
                  control={control}
                  render={({ field, fieldState: { error } }) => (
                    <FormControl fullWidth sx={{ m: 1 }} variant="standard">
                      <TextField
                        {...field}
                        id="outlined-multiline-flexible"
                        label="Số điện thoại"
                        variant="filled"
                        size="small"
                        error={error ? true : false}
                        helperText={error?.message}
                      />
                    </FormControl>
                  )}
                />
                <Controller
                  name="description"
                  control={control}
                  render={({ field, fieldState: { error } }) => (
                    <FormControl fullWidth sx={{ m: 1 }} variant="standard">
                      <TextField
                        {...field}
                        id="outlined-multiline-flexible"
                        label="Ghi chú"
                        variant="filled"
                        size="small"
                        error={error ? true : false}
                        helperText={error?.message}
                      />
                    </FormControl>
                  )}
                />
                <Button
                  variant="contained"
                  color="primary"
                  style={{
                    margin: 4,
                    alignItems: "center",
                    alignContent: "center",
                    textAlign: "center",
                  }}
                  type="submit"
                >
                  Gửi yêu cầu
                </Button>
              </form>
            </Grid>
            <Grid item xs={12} sm={6} md={6} lg={6} xl={6}>
              <StyledTitle variant="h5" align="center" color="#008B88">
                Hướng dẫn NẠP GENSHIN IMPACT
              </StyledTitle>
              <Box p={2}>
                <Typography style={{ backgroundColor: "red", color: "yellow" }}>
                  📛 Giá nạp hiện đã ổn định các bạn nên đơn ok nhé
                </Typography>
                <Typography
                  style={{
                    color: "red",
                    textTransform: "uppercase",
                    fontWeight: "bold",
                  }}
                >
                  BÀI CÁC CÂU HỎI VỀ NẠP:
                </Typography>
                <Typography
                  style={{
                    color: "red",
                    fontWeight: "bold",
                  }}
                >
                  Link check tài khoản đúng hay chưa
                </Typography>
                <Typography
                  style={{
                    backgroundColor: "yellow",
                    fontWeight: "bold",
                  }}
                >
                  https://account.mihoyo.com/#/account/loginDevices
                </Typography>
                <Typography style={{ backgroundColor: "red", color: "yellow" }}>
                  📛Đơn nạp khi nên không thể xong được ngay cần đợi xử lý
                </Typography>
                <Typography style={{ backgroundColor: "red", color: "yellow" }}>
                  📛Nếu đơn hủy tiền sẽ được hoàn về tài khoản các bạn
                </Typography>
                <Typography style={{}}>
                  📛Tài khoản và mật khẩu nên đơn phải là tài khoản Mihoyo ko
                  lên = FB - Google<br></br>
                  📛UID là UID các bạn vẫn dùng kết bạn<br></br>
                  📛Các gói nạp chưa tính x2 nếu có <br></br>
                  📛 Hãy cung cấp mã đăng nhập khi shop liên hệ lấy mã login
                  trong thư maill <br></br>
                  📛 Nếu không có SĐT hãy điền link fb hoặc zalo ở mục ghi chú
                </Typography>

                <Typography style={{ backgroundColor: "red", color: "yellow" }}>
                  📛 Một số lý do khi đơn của bạn bị hủy
                </Typography>
                <Typography>
                  - Sai tài khoản hoặc mật khẩu <br></br>- Số điện thoại không
                  liên hệ được <br></br>- Call nhưng không nghe máy <br></br>-
                  Không nạp tài khoản Facebook
                </Typography>
                <Typography style={{}}>📛 Bảo hành nạp 100%</Typography>
                <Typography style={{}}>
                  📛 Mọi thông tin nạp nếu không hiểu hãy ib cho Fanpage
                </Typography>
                <Typography style={{ backgroundColor: "red", color: "yellow" }}>
                  ❇️ Lưu ý : Khi nạp thành công đơn hãy đổi mật khẩu để đảm bảo
                  an toàn !
                </Typography>
              </Box>
            </Grid>
          </Grid>
        </StyledBox>
      </Container>

      <MyFooter />
    </div>
  );
}

export default Home;
